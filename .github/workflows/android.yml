name: Android CI

env:
  ANDROID_VERSION: 30
  EMULATOR_NAME: test
  EMULATOR_SYSTEM_IMAGE: "system-images;android-30;google_apis;x86"
  EMULATOR_DEVICE: pixel
  GRADLE_CACHE_KEY: gradle-cache-${{ github.sha }}

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  emulator:
    runs-on: ubuntu-latest
    outputs:
      emulator-ready: ${{ steps.emulator-status.outputs.ready }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17 (default)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set SKIP_JDK_VERSION_CHECK
        run: echo "SKIP_JDK_VERSION_CHECK=true" >> $GITHUB_ENV

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Enable KVM
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
          sudo adduser $USER libvirt
          sudo adduser $USER kvm

      - name: Install system image and create emulator
        id: emulator
        run: |
          # Setup environment
          export ANDROID_HOME=$ANDROID_SDK_ROOT
          echo "ANDROID_HOME=$ANDROID_HOME"
          echo "PATH=$PATH"
          echo "JAVA_HOME=$JAVA_HOME"
          echo "SDK_ROOT=$ANDROID_HOME"
          
          # Verify Java version
          java -version
          
          # List available SDK components
          echo "Listing available SDK components..."
          sdkmanager --sdk_root=$ANDROID_HOME --list | head -n 20
          
          # Install required Android components
          echo "Installing system image..."
          echo "y" | sdkmanager --sdk_root=$ANDROID_HOME "${{ env.EMULATOR_SYSTEM_IMAGE }}"
          
          echo "Installing emulator..."
          echo "y" | sdkmanager --sdk_root=$ANDROID_HOME "emulator"
          
          echo "Installing platform-tools..."
          echo "y" | sdkmanager --sdk_root=$ANDROID_HOME "platform-tools"
          
          echo "Installing build-tools..."
          echo "y" | sdkmanager --sdk_root=$ANDROID_HOME "build-tools;30.0.3"
          
          # Verify installation
          echo "Verifying installation..."
          sdkmanager --sdk_root=$ANDROID_HOME --list | grep "${{ env.EMULATOR_SYSTEM_IMAGE }}"
          
          # Create AVD
          echo "Creating AVD..."
          export ANDROID_HOME=$ANDROID_HOME
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          echo "no" | avdmanager create avd -n ${{ env.EMULATOR_NAME }} -k "${{ env.EMULATOR_SYSTEM_IMAGE }}" --device "${{ env.EMULATOR_DEVICE }}"
          
          # Start emulator
          echo "Starting emulator..."
          export ANDROID_HOME=$ANDROID_HOME
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          $ANDROID_HOME/emulator/emulator -avd ${{ env.EMULATOR_NAME }} -no-snapshot-save -no-audio -no-window &
          
          # Wait for emulator to be ready
          echo "Waiting for emulator..."
          adb wait-for-device
          
          # Wait for boot completion
          echo "Waiting for boot completion..."
          MAX_RETRIES=5
          RETRY=0
          while [ "$(adb shell getprop sys.boot_completed | tr -d '\r')" != "1" ] && [ $RETRY -lt $MAX_RETRIES ]; do
            echo "Boot not completed, retrying... ($((RETRY+1))/$MAX_RETRIES)"
            sleep 10
            RETRY=$((RETRY+1))
          done
          
          if [ $RETRY -eq $MAX_RETRIES ]; then
            echo "Error: Emulator failed to boot after $MAX_RETRIES attempts"
            exit 1
          fi
          
          # Disable animations
          echo "Disabling animations..."
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0
          
          # Final status check
          echo "Final emulator status check..."
          adb devices
          echo "::set-output name=ready::true"
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}

      - name: Check emulator status
        id: emulator-status
        run: |
          echo "Final emulator verification..."
          adb devices
          echo "::set-output name=ready::true"

  build:
    needs: emulator
    runs-on: ubuntu-latest
    if: ${{ needs.emulator.outputs.emulator-ready == 'true' }}

    steps:
      - uses: actions/checkout@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ env.GRADLE_CACHE_KEY }}
          restore-keys: |
            ${{ env.GRADLE_CACHE_KEY }}-

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build
        env:
          TERM: dumb

      - name: Run unit tests
        run: ./gradlew test
        env:
          TERM: dumb

      - name: Run connected tests
        run: ./gradlew connectedDebugAndroidTest
        env:
          TERM: dumb
        if: ${{ always() }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4.3.0
        with:
          name: test-results
          path: |
            app/build/test-results/
            app/build/reports/tests/
            app/build/outputs/androidTest-results/
            app/build/outputs/androidTest-results/connected/**
